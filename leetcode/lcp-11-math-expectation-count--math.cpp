

class Solution {
public:
    int expectNumber(vector<int>& scores) {
        /*
         * 概率
         * 能力值不同的面试者位置是固定的，期望值为1，下面求一段能力之相同的面试这全排列的位置不变的数学期望
         * n个数1,2,...,n的全排列, 可以理解为随机打乱一张一张抽
         * 1. 第一次抽出第一张的概率是1/n
         * 2. 第二次抽了2的概率
         *    a. 第一次抽了2的概率1/n，这样第二次不可能抽到2 -> 1/n * 0 = 0
         *    b. 第一次没抽2的概率(n - 1)/n, 这样第二次抽到2的概率为(n - 1)/n * 1/(n - 1) -> 1/n
         * 3. 第三次抽出3的概率
         *    a. 第一次抽了3的概率1/n -> 1/n * 0
         *    b. 第二次抽到3的概率(n - 1)/n * 1/(n - 1) * 0
         *    c. 第一次第二次没抽到3的概率(n - 1)/n * (n - 2)/(n - 1) * 1/(n - 2) -> 1/n
         * 随机排列后任意一个数字位置不变的概率为1/n, n个数当中位置不变数字的个数的数学期望为n * 1/n = 1
         * 题目转化为求scores中不同分数的人数 - 哈希表去重
         */
        unordered_set<int> tbl;
        for (auto score : scores)
            tbl.insert(score);
        return tbl.size();
    }
};
